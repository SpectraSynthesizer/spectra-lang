/*
Copyright (c) since 2015, Tel Aviv University and Software Modeling Lab

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Tel Aviv University and Software Modeling Lab nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Tel Aviv University and Software Modeling Lab 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*/

/*
 * generated by Xtext 2.10.0
 */
package tau.smlab.syntech.validation

import java.util.HashSet
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check
import tau.smlab.syntech.spectra.LTLAsm
import tau.smlab.syntech.spectra.LTLGar
import tau.smlab.syntech.spectra.Model
import tau.smlab.syntech.spectra.Pattern
import tau.smlab.syntech.spectra.Predicate
import tau.smlab.syntech.spectra.SpectraPackage
import org.eclipse.xtext.validation.CheckType
import tau.smlab.syntech.typesystem.TypeSystemManager
import tau.smlab.syntech.typesystem.TypeCheckIssue
import tau.smlab.syntech.spectra.Var
import tau.smlab.syntech.spectra.Define
import tau.smlab.syntech.spectra.Monitor
import tau.smlab.syntech.spectra.WeightDef
import tau.smlab.syntech.spectra.Counter
import tau.smlab.syntech.spectra.QuantifierExpr
import tau.smlab.syntech.spectra.EXGar

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SpectraValidator extends AbstractSpectraValidator {

	public static val INVALID_NAME = 'invalidName'

	@Check
	def checkIfReferenceableNamesAreUnique(Model m) {
		val seenNames = new HashSet<String>()
		val domainVarsNames = new HashSet<String>()

		for (e : m.elements.filter(typeof(Predicate))) {
			if (e.name !== null) {
				if (seenNames.contains(e.name)) {
					error("Predicate names have to be unique", e, SpectraPackage.Literals.PREDICATE__NAME)
				}
				seenNames.add(e.name)
			}
		}

		for (spectraVar : m.elements.filter(typeof(Var))) {
			var e = spectraVar.getVar()
			if (e.name !== null) {
				if (seenNames.contains(e.name)) {
					error("Variable names have to be unique", e, SpectraPackage.Literals.VAR_DECL.EIDAttribute)
				}
				seenNames.add(e.name)
			}
		}

		for (define : m.elements.filter(typeof(Define))) {
			for (defineDecl : define.defineList) {
				if (defineDecl.name !== null) {
					if (seenNames.contains(defineDecl.name)) {
						error("Define names have to be unique", defineDecl,
							SpectraPackage.Literals.DEFINE_DECL.EIDAttribute)
					}
					seenNames.add(defineDecl.name)
				}
			}
		}

		for (e : m.elements.filter(typeof(Pattern))) {
			if (e.name !== null) {
				if (seenNames.contains(e.name)) {
					error("Pattern names have to be unique", e, SpectraPackage.Literals.PATTERN__NAME)
				}
				seenNames.add(e.name)
			}
		}
		
		    for (e : m.elements.filter(typeof(EXGar))) {
      if (e.name !== null) {
        if (seenNames.contains(e.name)) {
          error("Existential guarantee names have to be unique", e, SpectraPackage.Literals.EX_GAR__NAME)
        }
        seenNames.add(e.name)
      }
    }

		for (e : m.elements.filter(typeof(LTLGar))) {
			if (e.name !== null) {
				if (seenNames.contains(e.name)) {
					error("Guarantee names have to be unique", e, SpectraPackage.Literals.LTL_GAR__NAME)
				}
				seenNames.add(e.name)
			}
			var tmpExpr = e.getTemporalExpr();
            //checks if every domain var in the quantifier expression has a unique name
            while(tmpExpr instanceof QuantifierExpr) {
                if(domainVarsNames.contains(tmpExpr.getDomainVar().name)) {
                    error("Domain variables names have to be unique in scope", e, SpectraPackage.Literals.LTL_GAR__TEMPORAL_EXPR)
                }
                domainVarsNames.add(tmpExpr.getDomainVar().name);
                tmpExpr=tmpExpr.getTemporalExpr();
            }
            domainVarsNames.clear();
		}

		for (e : m.elements.filter(typeof(LTLAsm))) {
			if (e.name !== null) {
				if (seenNames.contains(e.name)) {
					error("Assumption names have to be unique", e, SpectraPackage.Literals.LTL_ASM__NAME)
				}
				seenNames.add(e.name)
			}
			var tmpExpr = e.getTemporalExpr();
            //checks if every domain var in the quantifier expression has a unique name
            while(tmpExpr instanceof QuantifierExpr) {
                if(domainVarsNames.contains(tmpExpr.getDomainVar().name)) {
                    error("DomainVar Name must be unique in scope", e, SpectraPackage.Literals.LTL_ASM__TEMPORAL_EXPR)
                }
                domainVarsNames.add(tmpExpr.getDomainVar().name);
                tmpExpr=tmpExpr.getTemporalExpr();
            }
            domainVarsNames.clear();
		}

		for (monitor : m.elements.filter(typeof(Monitor))) {
			if (seenNames.contains(monitor.name)) {
				error("Monitor names have to be unique", monitor, SpectraPackage.Literals.MONITOR.EIDAttribute)
			}
			seenNames.add(monitor.name)
		}

		for (weight : m.elements.filter(typeof(WeightDef))) {
			if (weight.name !== null) {
				if (seenNames.contains(weight.name)) {
					error("Weight names have to be unique", weight, SpectraPackage.Literals.WEIGHT_DEF__NAME)
				}
				seenNames.add(weight.name)
			}
		}
	}

	@Check
	def checkIfPredicateParamNamesAreUnique(Predicate p) {
		val seenNames = new HashSet<String>()
		if (p.params !== null) {
			for (e : p.params.params) {
				if (seenNames.contains(e.name)) {
					error("Parameter names have to be unique", p, SpectraPackage.Literals.PREDICATE__PARAMS)
				}
				seenNames.add(e.name)
			}
		}
	}

  @Check
  def checkCounterPartsUnique(Counter c) {
    if (c.initial !== null && c.initial.size > 1) {
      error("Cannot define multiple initial constraints in a counter", c, SpectraPackage.Literals.COUNTER__INITIAL)
    }
    if (c.decPred !== null && c.decPred.size > 1) {
      error("Cannot define multiple decrement constraints in a counter", c, SpectraPackage.Literals.COUNTER__DEC_PRED)
    }
    if (c.incPred !== null && c.incPred.size > 1) {
      error("Cannot define multiple increment constraints in a counter", c, SpectraPackage.Literals.COUNTER__INC_PRED)
    }
    if (c.overflowMethod !== null && c.overflowMethod.size > 1) {
      error("Cannot define multiple overflow methods for a counter", c, SpectraPackage.Literals.COUNTER__OVERFLOW_METHOD)
    }
    
  }
  
	@Check
	def checkModuleNameStartsWithCapital(Model m) {
		if (!Character.isUpperCase(m.name.charAt(0))) {
			warning('Module name should start with a capital', SpectraPackage.Literals.MODEL__NAME, INVALID_NAME)
		}
	}

	@Check(CheckType.NORMAL)
	def typeCheck(EObject eobject) {
		val issue = TypeSystemManager.typeCheck(eobject) as TypeCheckIssue;
		if (issue !== null) {
			if (issue.hasEAttribute) {
				if (issue.isError) {
					error(issue.getIssueMessage(), issue.getEAttribute())
				} else if (issue.isWarning) {
					warning(issue.getIssueMessage(), issue.getEAttribute())
				}
			} else if (issue.hasEReference) {
				if (issue.isError) {
					error(issue.getIssueMessage(), issue.getEReference())
				} else if (issue.isWarning) {
					warning(issue.getIssueMessage(), issue.getEReference())
				}
			}
		}
	}

}
