/*
Copyright (c) since 2015, Tel Aviv University and Software Modeling Lab

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Tel Aviv University and Software Modeling Lab nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Tel Aviv University and Software Modeling Lab 
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT 
OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
*/

/*
 * generated by Xtext 2.10.0
 */
package tau.smlab.syntech.ui.outline

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import tau.smlab.syntech.spectra.Define
import tau.smlab.syntech.spectra.DefineDecl
import tau.smlab.syntech.spectra.TemporalExpression
import tau.smlab.syntech.spectra.TemporalIffExpr
import tau.smlab.syntech.spectra.TemporalOrExpr
import tau.smlab.syntech.spectra.TemporalUnaryExpr
import tau.smlab.syntech.spectra.Var
import tau.smlab.syntech.spectra.PatternParamList
import tau.smlab.syntech.spectra.TypedParamList
import tau.smlab.syntech.spectra.VarDecl
import tau.smlab.syntech.spectra.VarType
import tau.smlab.syntech.spectra.LTLGar
import tau.smlab.syntech.spectra.LTLAsm
import tau.smlab.syntech.spectra.Predicate
import tau.smlab.syntech.spectra.Pattern
import tau.smlab.syntech.spectra.Monitor
import tau.smlab.syntech.spectra.Counter
import tau.smlab.syntech.spectra.DefineRegExp
import tau.smlab.syntech.spectra.EXGar

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class SpectraOutlineTreeProvider extends DefaultOutlineTreeProvider {

  def override _createChildren(DocumentRootNode parentNode, EObject rootElement) {

    for (EObject content : rootElement.eContents()) {
      if (!_isLeaf(content)) {
        createNode(parentNode, content);

      }
    }
  }

  def boolean _isLeaf(LTLGar g) {
    return true;
  }

  def boolean _isLeaf(LTLAsm a) {
    return true;
  }

  def boolean _isLeaf(TemporalUnaryExpr ele) {
    return true;
  }

  def boolean _isLeaf(TemporalOrExpr ele) {
    return true;
  }

  def boolean _isLeaf(TemporalIffExpr ele) {
    return true;
  }

  def boolean _isLeaf(DefineDecl ele) {
    return true;
  }

  def boolean _isLeaf(Define ele) {
    return true;
  }

  def boolean _isLeaf(Monitor ele) {
    return true;
  }
  
  def boolean _isLeaf(DefineRegExp ele) {
    return true;
  }
  
  def boolean _isLeaf(EXGar ele) {
    return true;
  }
  
  def boolean _isLeaf(Var ele) {
    return true;
  }

  def boolean _isLeaf(TemporalExpression ele) {
    return true;
  }

  def boolean _isLeaf(PatternParamList ele) {
    return true;
  }

  def boolean _isLeaf(TypedParamList ele) {
    return true;
  }

  def boolean _isLeaf(VarDecl ele) {
    return true;
  }

  def boolean _isLeaf(VarType ele) {
    return true;
  }

  def boolean _isLeaf(Predicate ele) {
    return true;
  }

  def boolean _isLeaf(Pattern ele) {
    return true;
  }
  
  def boolean _isLeaf(Counter ele) {
    return true;
  }
}
